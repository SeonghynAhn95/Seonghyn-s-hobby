##Copyright 2021. Seonghyn Ahn in Yonsei UNIV All code cannot be copied without permission
## 실험한 영상을 갖고 각각의 T1, T2, PD 값을 뽑은 후 저장하는 코드입니다.

#############import######################
import pydicom as dcm
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import matplotlib.patches as patchess
##########################################

# Read a T1 weight Image folder.
TR1,TR2,TR3,TR4,TR5,TR6,TR7,TR8,TR9,TR10,TR11,TR12,TR13 =(
    'C:/RDICOM/Data T1 TR 200','C:/RDICOM/Data T1 TR 250',)
# Read a T2 weight Image folder
TE1='C:/RDICOM/IM_0049 Multi Echo'

#######################################################################
# Read a T1, T2 dicom file
DCMTR1 = dcm.dcmread(TR1)
DCMTR2 = dcm.dcmread(TR2)

DCMTE1 = dcm.dcmread(TE1)
## 순서는 폴더를 읽고 -> 다이콤 파일을 읽는 식
########################################################################
# Read a Image Pixel_array
# 다이콤안에 있는 픽셀 배열을 불러옵니다.
(img_arr1,img_arr2) = (DCMTR1.pixel_array, DCMTR2.pixel_array)

img_arre1 = DCMTE1.pixel_array

###########################################################################
## 여기서부터 어떻게 할꺼냐면..
## 우리가 얻은 영상의 각 픽셀별 value를 S라고 하자.
## 이 S는 S = C*(1-e(-TR/T1)) 식에서 나온거지.
## 우리는 S와 TR을 알고 있으니 fitting을 통해 C와 T1을 구하면 되겠지?

# Setting TR and TE range (to experience)
TR = [200,250,290,330,390,510,590,900,1200,1600,2000,2500,2900]
TE = [20,40,60,80,100,120,140,160,180,200]

# 실험을 통해 얻은 영상에서 도출된 signal값을 받는 곳
Slice_sum_TR = []
Slice_sum_TE = []

# [T1, C], [T2, C]를 저장하는 곳 (shape=(슬라이스수,x,y))로 구성
T1_Value_Save = np.zeros(shape=(35,256,256)) #T1 값 저장
C_T1_Value_Save = np.zeros(shape=(35,256,256)) #TR fitting 시 나오는 C 값 저장
T2_Value_Save = np.zeros(shape=(35,256,256)) #T2 값 저장
C_T2_Value_Save = np.zeros(shape=(35,256,256)) #TE fitting 시 나오는 C값 저장

# Slice 수의 시작점과 끝점. for문을 사용할 때 쓰임.
Slice_Start_num = 0
Slice_End_num = 35

# X축과 Y축이 0부터 시작하지 않은 이유는 검은색은 signal이 없기 때문에 0으로 놓을거임.
X_Start_num = 30
X_End_num = 240
Y_Start_num = 12
Y_End_num = 248

# T1_weight_image factor setting.
T1_weight_image_T1 = 1000
T1_weight_image_T2 = 100
T1_weight_image_TE = 15
T1_weight_image_PD = 1
T1_weight_image_C = T1_weight_image_PD*(np.exp(-T1_weight_image_TE/T1_weight_image_T2))


for slicenum in range(Slice_Start_num, Slice_End_num): # 슬라이스 설정
    for xnum in range(X_Start_num, X_End_num): # X축 설정
        for ynum in range(Y_Start_num, Y_End_num): # Y축 설정
            print('T1을 받습니다. Pixel Location : [%d][%d][%d]'%(slicenum,xnum,ynum))
            
            #실험을 통해 얻은 영상의 각 픽셀 별 signal 도출시작
            Slice_sum_TR.append(np.stack((img_arr1[slicenum, xnum,ynum],img_arr2[slicenum,xnum,ynum])))
            #이걸 피팅을 통해서 C와 T1만 뽑아버리는거임
            def funcTR(TR, T1_weight_image_C, T1_weight_image_T1): 
                return T1_weight_image_C*(1-np.exp(-TR/T1_weight_image_T1))

            popt, pcov = curve_fit(funcTR, TR, Slice_sum_TR[0],bounds=((0,0),(1000,1000)),method='trf', maxfev=5000)# 범위를 지정하여 fitting 진행
            np.nan_to_num(popt,copy=False)

            C_T1_Value_Save[slicenum][xnum][ynum] = popt[0] #C값 저장
            T1_Value_Save[slicenum][xnum][ynum] = popt[1] #T1값 저장
            Slice_sum_TR.clear() #다음 좌표를 위해 기존 Signal은 삭제 
np.save('C:/Users/Seonghyn/Desktop/T1,T2,PD data/T1/T1_Value_Data.npy', T1_Value_Save[:,:,:])
# T1 저장 완료.

# T2_weight_image factor setting.
T2_weight_image_T1 = 1000
T2_weight_image_T2 = 100
T2_weight_image_TR = 2500
T2_weight_image_PD = 1
T2_weight_image_C = T1_weight_image_PD*(1-np.exp(-T2_weight_image_TR/T2_weight_image_T1))

# 멀티슬라이스로 설정되어있음.
TEslicenum = [0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,
              210,220,230,240,250,260,270,280,290,300,310,320,330,340]
for slicenum in TEslicenum:
    for xnum in range(X_Start_num, X_End_num):
        for ynum in range(Y_Start_num, Y_End_num):
            print('T2를 받습니다. Pixel location : [%d][%d][%d]' % (slicenum,xnum,ynum))
            
            Slice_sum_TE.append((img_arre1[slicenum,xnum,ynum],img_arre1[slicenum+1,xnum,ynum],
                                 img_arre1[slicenum+2,xnum,ynum],img_arre1[slicenum+3,xnum,ynum],
                                 img_arre1[slicenum+4,xnum,ynum],img_arre1[slicenum+5,xnum,ynum],
                                 img_arre1[slicenum+6,xnum,ynum],img_arre1[slicenum+7,xnum,ynum],
                                 img_arre1[slicenum+8,xnum,ynum],img_arre1[slicenum+9,xnum,ynum]))

            def funcTE(TE, T2_weight_image_C, T2_weight_image_T2): 
                return T2_weight_image_C*(np.exp(-TE/T2_weight_image_T2))

            popt, pcov = curve_fit(funcTE, TE, Slice_sum_TE[0],bounds=((0,0),(1000,1000)),method='trf', maxfev=5000)# 범위를 지정하여 fitting 진행
            np.nan_to_num(popt,copy=False)
            
            if slicenum == 0: #첫번째 슬라이스
                C_T2_Value_Save[0][xnum][ynum] = popt[0] #C값 저장
                T2_Value_Save[0][xnum][ynum] = popt[1] #T2값 저장
                Slice_sum_TE.clear() #다음 좌표를 위해 기존 Signal은 삭제 
            elif slicenum == 10: #두번째 슬라이스
                C_T2_Value_Save[1][xnum][ynum] = popt[0]
                T2_Value_Save[1][xnum][ynum] = popt[1]
                Slice_sum_TE.clear()
            elif slicenum == 20:
                C_T2_Value_Save[2][xnum][ynum] = popt[0]
                T2_Value_Save[2][xnum][ynum] = popt[1]
                Slice_sum_TE.clear()

               
                                
               
np.save('C:/Users/Seonghyn/Desktop/T1,T2,PD data/T2/T2_Value_data.npy', T2_Value_Save[:,:,:])                

# 마지막 Proton Density를 얻고자함
PDTE = 15 #이건 어떻게 설정할지 고민.
# 양성자강조밀도영상을 나타내고자 하는 판을 만들어줌.
Proton_Density_Save = np.zeros(shape=(35,256,256))

# 돌린다.
for slicenum in range(Slice_Start_num,Slice_End_num):
    for xnum in range(X_Start_num, X_End_num):
        for ynum in range(Y_Start_num, Y_End_num):
            #PD를 구하는 식은 다음 아래와 같음.
            #우리는 C를 통해 PD를 제외하고 TE와 T2를 알 수 있었으니
            #이와 반대로 PD만 남겨놓고 다 넘겨버림
            #PD = C/(exp(-TE/T2))가 되겠지?
            #이걸로 구하면된다.
            Proton_Density = C_T1_Value_Save[slicenum][xnum][ynum]/np.exp(-PDTE/T2_Value_Save[slicenum][xnum][ynum])
            print('PD값을 받습니다.',xnum,ynum,Proton_Density)
            Proton_Density_Save[slicenum][xnum][ynum] = Proton_Density
        
np.save('C:/Users/Seonghyn/Desktop/T1,T2,PD data/PD/PD_Value_0Slice.npy', Proton_Density_Save[:,:])
